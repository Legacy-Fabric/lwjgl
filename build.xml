<project name="LWJGL" default="all" basedir=".">

	<property name="build.sysclasspath" value="last" />
	<property environment="env" />

	<import file="platform_build/build-definitions.xml"/>

	<!-- ================================================================== -->
	<!-- Everything below this line is targets.								-->
	<!-- Do not modify, unless you know what you're doing 					-->
	<!-- ================================================================== -->

	<!-- ================================================================== -->
	<!-- Initialize build			 										-->
	<!-- ================================================================== -->

<!--	&lt;!&ndash; Creates a distribution of LWJGL &ndash;&gt;-->
<!--	<target name="release" description="Creates a distribution of LWJGL using supplied native binaries">-->
<!--		&lt;!&ndash; Warn user &ndash;&gt;-->
<!--        <echo message="Before running the release target, please manually compile all platforms and place required files in ${lwjgl.lib}/windows, ${lwjgl.lib}/linux, ${lwjgl.lib}/freebsd and ${lwjgl.lib}/macosx${line.separator}Missing files will result in a successfull built, but with incomplete release zips"/>-->
<!--        <input-->
<!--            message="All data in the ${lwjgl.dist} folder will be deleted. Continue? "-->
<!--            validargs="yes,no"-->
<!--            addproperty="do.delete"-->
<!--        />-->
<!--        <condition property="do.abort">-->
<!--            <equals arg1="no" arg2="${do.delete}"/>-->
<!--        </condition>-->
<!--        <fail if="do.abort">Build aborted by user.</fail>-->

<!--        &lt;!&ndash; prepare &ndash;&gt;-->
<!--        <delete dir="${lwjgl.dist}" quiet="true" failonerror="false" />-->
<!--        <antcall target="clean-java" />-->
<!--        <antcall target="-initialize" />-->

<!--        &lt;!&ndash; compile and create debug jars &ndash;&gt;-->
<!--        <antcall target="generate-debug" />-->
<!--        <antcall target="compile" />-->
<!--        <antcall target="-createdebugjars" />-->

<!--		&lt;!&ndash; Generator will skip all templates if we don't clean &ndash;&gt;-->
<!--		<delete dir="${lwjgl.bin}/org" quiet="true" failonerror="false" taskname="cleaning bin folder" />-->

<!--        &lt;!&ndash; compile and create jars &ndash;&gt;-->
<!--        <antcall target="generate-all" />-->
<!--        <antcall target="compile" />-->
<!--        <antcall target="-createjars" />-->

<!--        <antcall target="-jars_NoDEP" />-->
<!--        <antcall target="javadoc" />-->

<!--        &lt;!&ndash; copy resources to res folder &ndash;&gt;-->
<!--        <copy todir="${lwjgl.temp}/res">-->
<!--            <fileset dir="res"/>-->
<!--        </copy>-->

<!--  	    &lt;!&ndash; copy docs &ndash;&gt;-->
<!-- 		<copy todir="${lwjgl.temp}/doc">-->
<!--    	<fileset dir="${lwjgl.docs}">-->
<!--    		<patternset refid="lwjgl-docs.fileset" />-->
<!--    	</fileset>-->
<!--      	</copy>-->

<!--		&lt;!&ndash; create distribution from files in libs/ and temp/ &ndash;&gt;-->
<!--		<antcall target="-distribution_javadoc" />-->
<!--		<antcall target="-distribution_source" />-->
<!--		<antcall target="-distribute" />-->
<!--	</target>-->

<!--	&lt;!&ndash; Packages the java files for the ES build &ndash;&gt;-->
<!--	<target name="-createjars_es">-->
<!--		&lt;!&ndash; ================================================================== &ndash;&gt;-->
<!--		&lt;!&ndash; Generate a list of the OpenGL extension classes					&ndash;&gt;-->
<!--		&lt;!&ndash; ================================================================== &ndash;&gt;-->
<!--		<fileset id="opengl-template-fileset" dir="${lwjgl.src}/generated/org/lwjgl/opengl" includes="${opengl-template-pattern}"/>-->
<!--		<property name="opengl-template-files" refid="opengl-template-fileset"/>-->

<!--		<tempfile property="temp.file"/>-->
<!--		<echo file="${temp.file}" message="${opengl-template-files}" taskname=""/>-->

<!--		<loadfile srcfile="${temp.file}" property="opengl-template-classes">-->
<!--			<filterchain>-->
<!--				<tokenfilter delimoutput=",">-->
<!--					<stringtokenizer delims=";"/>-->
<!--					<replaceregex pattern="(.+)[.]java"-->
<!--					              replace="org/lwjgl/opengl/\1.class"/>-->
<!--				</tokenfilter>-->
<!--			</filterchain>-->
<!--		</loadfile>-->

<!--		<delete file="${temp.file}" />-->

<!--		&lt;!&ndash; Create lwjgl.jar &ndash;&gt;-->
<!--		<jar destfile="${lwjgl.temp}/jar/lwjgl.jar" taskname="lwjgl.jar">-->
<!--			&lt;!&ndash; Files to include in the lwjgl.jar file, for the ES build &ndash;&gt;-->
<!--			<fileset dir="${lwjgl.bin}" excludes="${opengl-template-classes}">-->
<!--				<patternset id="lwjgl_es.package.pattern">-->
<!--					<include name="org/**/*"/>-->
<!--					<exclude name="org/lwjgl/d3d/**"/>-->
<!--					<exclude name="org/lwjgl/test/**"/>-->
<!--					<exclude name="org/lwjgl/util/**"/>-->
<!--					<exclude name="org/lwjgl/examples/**"/>-->
<!--				</patternset>-->
<!--			</fileset>-->

<!--			<manifest>-->
<!--				<attribute name="Sealed" value="true"/>-->
<!--			</manifest>-->
<!--		</jar>-->

<!--		&lt;!&ndash; Create lwjgl_test.jar &ndash;&gt;-->
<!--		<jar destfile="${lwjgl.temp}/jar/lwjgl_test.jar" taskname="lwjgl_test.jar">-->
<!--			<fileset refid="lwjgl_test_es.fileset"/>-->
<!--		</jar>-->
<!--	</target>-->

	<target name="version-mismatch">
		<loadfile srcfile="lwjgl/src/main/java/org/lwjgl/WindowsSysImplementation.java" property="lwjgl.java.windows.version">
			<filterchain>
				<tokenfilter>
	    		<containsstring contains="JNI_VERSION ="/>
				</tokenfilter>
			</filterchain>
		</loadfile>
		<loadfile srcfile="lwjgl/src/main/java/org/lwjgl/LinuxSysImplementation.java" property="lwjgl.java.linux.version">
			<filterchain>
				<tokenfilter>
	    		<containsstring contains="JNI_VERSION ="/>
				</tokenfilter>
			</filterchain>
		</loadfile>
		<loadfile srcfile="lwjgl/src/main/java/org/lwjgl/MacOSXSysImplementation.java" property="lwjgl.java.macosx.version">
			<filterchain>
				<tokenfilter>
	    		<containsstring contains="JNI_VERSION ="/>
				</tokenfilter>
			</filterchain>
		</loadfile>
		<loadfile srcfile="lwjgl-platform/src/generated/c/org_lwjgl_WindowsSysImplementation.h" property="lwjgl.native.windows.version">
			<filterchain>
				<tokenfilter>
	    		<containsstring contains="#define org_lwjgl_WindowsSysImplementation_JNI_VERSION"/>
				</tokenfilter>
			</filterchain>
		</loadfile>
		<loadfile srcfile="lwjgl-platform/src/generated/c/org_lwjgl_LinuxSysImplementation.h" property="lwjgl.native.linux.version">
			<filterchain>
				<tokenfilter>
	    		<containsstring contains="#define org_lwjgl_LinuxSysImplementation_JNI_VERSION"/>
				</tokenfilter>
			</filterchain>
		</loadfile>
		<loadfile srcfile="lwjgl-platform/src/generated/c/org_lwjgl_MacOSXSysImplementation.h" property="lwjgl.native.macosx.version">
			<filterchain>
				<tokenfilter>
	    		<containsstring contains="#define org_lwjgl_MacOSXSysImplementation_JNI_VERSION"/>
				</tokenfilter>
			</filterchain>
		</loadfile>
		<echo>
			lwjgl.java.windows.version = ${lwjgl.java.windows.version}
			lwjgl.native.windows.version = ${lwjgl.native.windows.version}
			lwjgl.java.linux.version = ${lwjgl.java.linux.version}
			lwjgl.native.linux.version = ${lwjgl.native.linux.version}
			lwjgl.java.freebsd.version = ${lwjgl.java.linux.version}
			lwjgl.native.freebsd.version = ${lwjgl.native.linux.version}
			lwjgl.java.openbsd.version = ${lwjgl.java.linux.version}
			lwjgl.native.openbsd.version = ${lwjgl.native.linux.version}
			lwjgl.java.macosx.version = ${lwjgl.java.macosx.version}
			lwjgl.native.macosx.version = ${lwjgl.native.macosx.version}
		</echo>
	</target>

	<macrodef name="version-check">
	  <attribute name="platform"/>
	  <sequential>
			<java classname="org.lwjgl.test.NativeTest" logError="false" resultproperty="nativetest.res" outputproperty="nativetest.out" errorproperty="nativetest.err" fork="true">
				<jvmarg value="-Djava.library.path=libs/@{platform}"/>
                <jvmarg value="-Dorg.lwjgl.util.Debug=true"/>
	    	<classpath>
	      	<pathelement path="${lwjgl.bin}"/>
	        <pathelement path="${java.class.path}"/>
	      </classpath>
	    </java>

	    <fail message="Unable to load native library: ${nativetest.err}">
	     <condition>
	       <not>
	         <equals arg1="OK" arg2="${nativetest.out}"/>
	       </not>
	     </condition>
	   </fail>

	   <echo message="Successfully executed NativeTest"/>
		</sequential>
	</macrodef>

<!--	&lt;!&ndash; Compiles LWJGL on Win32 platforms  &ndash;&gt;-->
<!--	<target name="-compile_native_win32">-->
<!--		<ant antfile="platform_build/windows_ant/build.xml" inheritAll="false"/>-->
<!--		<copy todir="${lwjgl.lib}/windows">-->
<!--			<fileset dir="${lwjgl.bin}/lwjgl" includes="lwjgl*.dll"/>-->
<!--		</copy>-->
<!--		<condition property="test_native.win32" value="1">-->
<!--			<not>-->
<!--				<and>-->
<!--					<isset property="env.ARCHITECTURE"/>-->
<!--					<equals arg1="${env.ARCHITECTURE}" arg2="arm64"/>-->
<!--				</and>-->
<!--			</not>-->
<!--		</condition>-->
<!--		<antcall target="-test_native_win32" />-->
<!--	</target>-->
<!--	<target name="-test_native_win32" if="test_native.win32">-->
<!--		<version-check platform="windows"/>-->
<!--	</target>-->

<!--	&lt;!&ndash; Compiles LWJGL on Linux platforms &ndash;&gt;-->
<!--	<target name="-compile_native_linux">-->
<!--		<ant antfile="platform_build/linux_ant/build.xml" inheritAll="false"/>-->
<!--		<copy todir="${lwjgl.lib}/linux">-->
<!--			<fileset dir="${lwjgl.bin}/lwjgl" includes="liblwjgl*.so"/>-->
<!--		</copy>-->
<!--		&lt;!&ndash; fails on x32 <version-check platform="linux"/> &ndash;&gt;-->
<!--	</target>-->

	<!-- Compiles LWJGL on FreeBSD platforms -->
	<target name="-compile_native_freebsd">
		<ant antfile="platform_build/bsd_ant/build.xml" inheritAll="false"/>
		<copy todir="${lwjgl.lib}/freebsd">
			<fileset dir="${lwjgl.bin}/lwjgl" includes="liblwjgl*.so"/>
		</copy>
	</target>

	<!-- Compiles LWJGL on OpenBSD platforms -->
	<target name="-compile_native_openbsd">
		<ant antfile="platform_build/bsd_ant/build.xml" inheritAll="false"/>
		<copy todir="${lwjgl.lib}/openbsd">
			<fileset dir="${lwjgl.bin}/lwjgl" includes="liblwjgl*.so"/>
		</copy>
	</target>

<!--	&lt;!&ndash; Compiles LWJGL on Mac platforms &ndash;&gt;-->
<!--	<target name="-compile_native_macosx">-->
<!--		<ant antfile="platform_build/macosx_ant/build.xml" inheritAll="false"/>-->
<!--		<copy todir="${lwjgl.lib}/macosx">-->
<!--			<fileset dir="${lwjgl.bin}/lwjgl" includes="liblwjgl*.dylib"/>-->
<!--		</copy>-->
<!--		<version-check platform="macosx"/>-->
<!--	</target>-->

	<!-- Compiles LWJGL ES on Win32 platforms  -->
	<target name="-compile_native_win32_es" if="lwjgl.platform.windows">
		<ant antfile="platform_build/windows_ant/build_es.xml" inheritAll="false"/>
		<copy todir="${lwjgl.lib}/windows">
			<fileset dir="${lwjgl.bin}/lwjgles" includes="lwjgl*.dll"/>
		</copy>
	</target>

	<!-- Compiles LWJGL ES on Linux platforms -->
	<target name="-compile_native_linux_es" if="lwjgl.platform.linux">
		<ant antfile="platform_build/linux_ant/build_es.xml" inheritAll="false"/>
		<copy todir="${lwjgl.lib}/linux">
			<fileset dir="${lwjgl.bin}/lwjgles" includes="liblwjgl*.so"/>
		</copy>
	</target>

<!--	<target name="repack200" description="Pack200-repack a jar file">-->
<!--		<pack200 src="${input}" destfile="${output}" repack="true"/>-->
<!--	</target>-->

<!--	<target name="pack200" description="Pack200 a jar file">-->
<!--     <pack200 src="${input}" destfile="${output}"/>-->
<!--	</target>-->

<!--	<target name="lzma" description="LZMA compress a file">-->
<!--  	<java fork="true" classname="SevenZip.LzmaAlone">-->
<!--			<classpath>-->
<!--      	<pathelement location="platform_build/JLzma.jar"/>-->
<!--      </classpath>-->
<!--      <jvmarg value="-Xmx512m"/>-->
<!--    	<arg value="e"/>-->
<!--    	<arg value="${input}"/>-->
<!--    	<arg value="${output}"/>-->
<!--   	</java>-->
<!--	</target>-->

<!--	<target name="compress-sign-class">-->
<!--		<antcall target="repack200">-->
<!--			<param name="input" value="${dir}${jarfile}.jar"/>-->
<!--			<param name="output" value="${dir}${jarfile}-repack.jar"/>-->
<!--		</antcall>-->
<!--		<signjar jar="${dir}${jarfile}-repack.jar" alias="${alias}" keystore="${keystore}" storepass="${password}"/>-->
<!--		<antcall target="pack200">-->
<!--			<param name="input" value="${dir}${jarfile}-repack.jar"/>-->
<!--			<param name="output" value="${dir}${jarfile}.jar.pack"/>-->
<!--		</antcall>-->
<!--		<antcall target="lzma">-->
<!--			<param name="input" value="${dir}${jarfile}.jar.pack"/>-->
<!--			<param name="output" value="${outputdir}${jarfile}.jar.pack.lzma"/>-->
<!--		</antcall>-->
<!--		&lt;!&ndash;delete file="${dir}${jarfile}-repack.jar"/&ndash;&gt;-->
<!--		<delete file="${dir}${jarfile}.jar.pack"/>-->
<!--		&lt;!&ndash;delete file="${dir}${jarfile}.jar"/&ndash;&gt;-->
<!--		<rename src="${dir}${jarfile}-repack.jar" dest="${dir}${jarfile}.jar" replace="yes"/>-->
<!--	</target>-->

<!--	<target name="compress-resource">-->
<!--		<antcall target="lzma">-->
<!--			<param name="input" value="${input}"/>-->
<!--			<param name="output" value="${output}"/>-->
<!--		</antcall>-->
<!--	</target>-->

<!--	<target name="runtest" depends="all">-->
<!--		<fail message="test.mainclass is not set. Use 'ant -Dtest.mainclass=&lt;main-class&gt; runtest'" unless="test.mainclass"/>-->
<!--		<condition property="native_path" value="libs/windows">-->
<!--			<os family="windows" />-->
<!--		</condition>-->

<!--		<condition property="native_path" value="libs/linux">-->
<!--			<or>-->
<!--				<os name="Linux" />-->
<!--				<os name="SunOS" />-->
<!--			</or>-->
<!--		</condition>-->

<!--		<condition property="native_path" value="libs/macosx">-->
<!--			<os name="Mac OS X" />-->
<!--		</condition>-->
<!--		<property name="native_path_expanded" location="${native_path}"/>-->
<!--		<java classname="${test.mainclass}" classpath="res:${lwjgl.lib}/lwjgl.jar:${lwjgl.lib}/lwjgl_util.jar:${lwjgl.lib}/lwjgl_test.jar:${lwjgl.lib}/jinput.jar" fork="true">-->
<!--			<sysproperty key="org.lwjgl.util.Debug" value="true"/>-->
<!--			<sysproperty key="java.library.path" value="${native_path_expanded}"/>-->
<!--			<arg line="${args}"/>-->
<!--		</java>-->
<!--	</target>-->

<!--	&lt;!&ndash; Creates the Javadoc &ndash;&gt;-->
<!--	<target name="javadoc" description="Creates javadoc from java source code">-->
<!--		<javadoc destdir="${lwjgl.docs}/javadoc" classpath="${lwjgl.lib}/jinput.jar" author="true" version="true" use="true" source="1.8" windowtitle="LWJGL API" useexternalfile="true">-->
<!--			<fileset refid="lwjgl.javadoc.fileset" />-->
<!--			<doctitle><![CDATA[<h1>Lightweight Java Game Toolkit</h1>]]></doctitle>-->
<!--			<bottom><![CDATA[<i>Copyright &#169; 2002-2009 lwjgl.org. All Rights Reserved.</i>]]></bottom>-->
<!--		</javadoc>-->
<!--	</target>-->

<!--	&lt;!&ndash; get and copy nightly binaries into libs folder &ndash;&gt;-->
<!--	<target name="copy-nightly-binaries" depends="-initialize" description="Copies latest successful nightly binaries into appropriate libs folder">-->
<!--		<delete file="${lwjgl.temp}/lwjgl-${lwjgl.version}.zip" failonerror="false"/>-->
<!--		<get src="http://ci.newdawnsoftware.com/job/LWJGL-git-dist/lastBuild/artifact/dist/lwjgl-${lwjgl.version}.zip" dest="${lwjgl.temp}" verbose="true"/>-->
<!--		<unzip src="${lwjgl.temp}/lwjgl-${lwjgl.version}.zip" dest="${lwjgl.lib}" overwrite="true">-->
<!--		 	<patternset>-->
<!--				<include name="**/native/**/*lwjgl*"/>-->
<!--			</patternset>-->
<!--			<globmapper from="lwjgl-${lwjgl.version}/native/*" to="*"/>-->
<!--		</unzip>-->
<!--	</target>-->
</project>
