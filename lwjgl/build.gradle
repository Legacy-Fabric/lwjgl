plugins {
    id "java"
}

sourceSets {
    generated {
        java
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }

    main {
        java
        compileClasspath += sourceSets.generated.compileClasspath
        runtimeClasspath += sourceSets.generated.runtimeClasspath
    }
}

dependencies {
    implementation(files("../libs/AppleJavaExtensions.jar"))
    implementation(files("../libs/asm-debug-all.jar"))
    implementation(project(":lwjgl-common"))
    implementation("net.java.jinput:jinput:2.0.5")
}

compileJava {
    dependsOn ":lwjgl-templates:generateAll"
    options.getHeaderOutputDirectory().set(file("../lwjgl-platform/src/generated/c/"))

    source project(":lwjgl-common").sourceSets.main.java, sourceSets.main.java, sourceSets.generated.java
}

jar {
    include "org/**/*"
    exclude(
            "org/lwjgl/opengles/**",
            "org/lwjgl/util/**"
    )
    include "org/lwjgl/opengles/ContextAttribs*.*"

    manifest {
        attributes(
                "Sealed": true
        )
    }
}

tasks.register("jarUtils", Jar) {
    dependsOn ":lwjgl:classes"

    from(compileJava.outputs) {
        exclude "**.*"
        exclude "org/lwjgl/util/generator/**"
        exclude "org/lwjgl/util/applet/**"
        include "org/lwjgl/util/**"
    }

    archiveBaseName = "lwjgl_util"
}

assemble.dependsOn(":lwjgl:jarUtils")