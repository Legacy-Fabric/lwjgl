def ENV = System.getenv()

def getNativeFolder(String name, String fold) {
    return file("lwjgl-platform/src/" + name + "/c/" + fold).toString()
}

def os_arch = getArch(System.getProperty("os.arch"))
def target_arch = ENV.ARCHITECTURE ? getArch(ENV.ARCHITECTURE) : os_arch

def libname = "liblwjgl-linux-${target_arch}.so"

def java_home = System.getProperty("java.home")
if (ENV.ARCHITECTURE && target_arch != "amd64") {
    if (target_arch == "armhf" || target_arch == "riscv64"
            || target_arch == "armel" || target_arch == "riscv64"
            || target_arch == "powerpc" || target_arch == "ppc64") {
        java_home = ENV.TARGET_JAVA
    } else if (target_arch == "aarch64") {
        java_home = ENV.JAVA_HOME_8_AARCH64 + "/jre"
    } else if (target_arch == "i386") {
        java_home = ENV.JAVA_HOME_8_I386 + "/jre"
    } else if (target_arch == "ppc64el") {
        java_home = ENV.JAVA_HOME_8_PPC64LE + "/jre"
    }
}

def libs = []

if (target_arch == "amd64") {
    libs += [
            "-L/usr/X11R6/lib64",
            "-L/usr/X11/lib64"
    ]
} else {
    libs += [
            "-L/usr/X11R6/lib",
            "-L/usr/X11/lib"
    ]
}

def java_in_arch = target_arch

if (java_in_arch == "ppc64el") {
    java_in_arch = "ppc64le"
}

libs += [
        "-lm",
        "-lX11",
        "-lXext",
        "-lXcursor",
        "-lXrandr",
        "-lXxf86vm",
        "-lpthread",
        "-L${java_home}/lib",
        "-L${java_home}/lib/${java_in_arch}",
        "-ljawt"
]

def cflags = [
        "-O2"
]

cflags += [
        "-Wall",
        "-c",
        "-fPIC",
        "-std=c99",
        "-Wunused"
]

def version_script_flags = [
//        "-Wl,--version-script='${Native}/linux/lwjgl.map"
]

def linker_flags = version_script_flags + [
        "-shared", "-O2", "-Wall", "-o", libname
] + libs

def compiler = "gcc"
def stripper = "strip"

if (ENV.ARCHITECTURE) {
    def thepart;
    switch (target_arch) {
        case "armhf":
            thepart = "arm-linux-gnueabihf"
            break
        case "armel":
            thepart = "arm-linux-gnueabi"
            break
        case "aarch64":
            thepart = "aarch64-linux-gnu"
            break
        case "ppc64el":
            thepart = "powerpc64le-linux-gnu"
            break
        case "riscv64":
            thepart = "riscv64-linux-gnu"
            break
        case "powerpc":
            thepart = "powerpc-linux-gnu"
            break
        case "ppc64":
            thepart = "powerpc64-linux-gnu"
            break
        default:
            thepart = ""
            break
    }

    if (!thepart.isEmpty()) {
        compiler = "${thepart}-${compiler}"
        stripper = "${thepart}-${stripper}"
    }
}

def workdir = "bin/lwjgl"
def workdirX = "${workdir}/${target_arch}"

def cflags_pthread = ["-pthread"]

tasks.register("linux_natives_init") {
    dependsOn "a-version-mismatch"
    doFirst {
        println(
                "Compiler: ${compiler}" +
                "\nJava Home: ${java_home}" +
                "\nOS arch: ${os_arch}" +
                "\nTarget arch ${target_arch}"
        )
        mkdir(workdirX)
    }
}

tasks.register("linux_natives_compile", Exec) {
    dependsOn "linux_natives_init"
    workingDir(workdirX)
    executable(compiler)

    if (target_arch == "i386") {
        args("-m32")
    }

    cflags.each {args(it)}
    cflags_pthread.each {args(it)}

    ["${java_home}/include", "${java_home}/include/linux", "${java_home}/../include",
     "${java_home}/../include/linux",
     getNativeFolder("generated", "."),
     getNativeFolder("common", "common"),
     getNativeFolder("common", "common/opengl"),
     getNativeFolder("linux", "linux"),
     getNativeFolder("linux", "linux/opengl")
    ].each {
        args("-I" + it)
    }

    doFirst {
        def folders = project(":lwjgl-platform").sourceSets.common.resources.srcDirs +
                project(":lwjgl-platform").sourceSets.linux.resources.srcDirs +
                project(":lwjgl-platform").sourceSets.generated.resources.srcDirs

        folders.each {
            if (it.toString().contains("lwjgl-platform/src")) {
                ["common", "common/opengl", "generated/openal",
                 "generated/opencl", "generated/opengl", "linux", "linux/opengl"].each {et ->
                    fileTree(it.toString() + "/" + et) {
                        include "*.c"
                    }.files.each {args(it.toString())}
                }
            }
        }
    }
}

tasks.register("linux_natives_link", Exec) {
    dependsOn "linux_natives_compile"
    workingDir(workdir)
    executable(compiler)

    doFirst {
        fileTree(workdirX) {
            include "*.o"
        }.files.each {args(it.toString())}

        if (target_arch == "i386") {
            args("-m32")
        }

        linker_flags.each {args(it)}
    }
}

tasks.register("linux_natives_strip", Exec) {
    dependsOn "linux_natives_link"
    workingDir(workdir)
    executable(stripper)

    doFirst {
        fileTree(workdir) {
            include libname
        }.files.each {args(it.toString())}
    }
}
