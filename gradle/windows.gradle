def ENV = System.getenv()

def os_arch = getArch(System.getProperty("os.arch"))
def target_arch = getArch(System.getProperty("target.arch", os_arch))

def java_home = System.getProperty("target.java.home", System.getProperty("java.home"))

if (ENV.ARCHITECTURE && target_arch == "aarch64") {
    java_home = ENV.JAVA_HOME_17_ARM64 + "/jre"
}

def sdkhome = ENV.VCToolsInstallDir ? ENV.VCToolsInstallDir : ENV.MSVC
def sdkhomelib = sdkhome + "/lib/x64"

if (target_arch == "i386") {
    sdkhomelib = sdkhome + "/lib"
} else if (target_arch == "aarch64") {
    sdkhomelib = sdkhome + "/lib/arm64"
}

def dllname = "lwjgl-windows-${target_arch}.dll"

def libss = "Kernel32.lib ole32.lib OpenGL32.Lib Version.lib user32.lib Gdi32.lib Advapi32.lib jawt.lib delayimp.lib winmm.lib Comctl32.lib"

def workdir = file("lwjgl-platform/build/natives")
def workdirX = "${workdir}/${target_arch}"
file(workdirX).mkdirs()

tasks.register("compile_win32", Exec) {
    dependsOn "a-version-mismatch"
    executable("cl")

    doFirst {
        args("/c", "/W2", "/EHsc", "/Ox", "/Gy",
                "/MT", "/MP", "/nologo")

        def iss = [
                "${sdkhome}/include",
                "${java_home}/include",
                "${java_home}/include/win32",
                "${java_home}/../include",
                "${java_home}/../include/win32",
                getNativeFolder(project,"generated", "."),
                getNativeFolder(project,"common", "common"),
                getNativeFolder(project,"common", "common/opengl"),
                getNativeFolder(project,"windows", "windows"),
                getNativeFolder(project,"windows", "windows/opengl")
        ]

        iss.each {
            args("/I" + it.replace("/", "\\"))
        }

        def folders = project(":lwjgl-platform").sourceSets.common.resources.srcDirs +
                project(":lwjgl-platform").sourceSets.windows.resources.srcDirs +
                project(":lwjgl-platform").sourceSets.generated.resources.srcDirs

        folders.each {
            if (it.toString().contains("lwjgl-platform\\src")) {
                ["common", "common/opengl", "generated/openal",
                 "generated/opencl", "generated/opengl", "windows", "windows/opengl"].each {et ->
                    fileTree(it.toString() + "/" + et) {
                        include "*.c"
                    }.files.each {args(it.toString())}
                }
            }
        }

        println("SDK: ${sdkhomelib}" +
                "\nDLLName: ${dllname}" +
                "\nJava Home: ${java_home}" +
                "\nOS arch: ${os_arch}" +
                "\nTarget arch: ${target_arch}"
        )
    }

    workingDir(workdirX)
}

tasks.register("link_win32", Exec) {
    dependsOn "compile_win32"
    executable("cl")

    doFirst {
        args(
                "/LD", "/nologo"
        )

        fileTree(workdirX) {
            include "*.obj"
        }.files.each {args(it.toString())}

        args(
                "/Fe${dllname}", "/link",
                "/LIBPATH:${java_home}\\lib",
                "/LIBPATH:${java_home}\\..\\lib",
                "/LIBPATH:${sdkhomelib}",
                "/OPT:REF",
                "/OPT:ICF",
                "/DLL",
                "/DELAYLOAD:jawt.dll"
        )

        libss.split(" ").each {args(it)}
    }

    workingDir(workdir)
}

tasks.register("build_natives_win32") {
    if (!file(workdir.toString() + "/" + dllname).exists()) {
        dependsOn "link_win32"
    }
}