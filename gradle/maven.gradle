def proparties = project.praps

tasks.register('copylwjgljars', Copy) {
    dependsOn "compile", "-createjars"
    from(proparties['lwjgl.temp'].toString() + "/jar/") {
        include "lwjgl.jar", "lwjgl_util.jar", "lwjgl_util_applet.jar"
    }

    into(proparties['lwjgl.dstMaven'])
}

tasks.register("copymavenpoms", Copy) {
    mustRunAfter "createmavennativejars"


    from(proparties['lwjgl.maven']) {
        include "*.pom"
    }

    into(proparties['lwjgl.dstMaven'])

//          <filterset>
//      			<filter token="VERSION" value="${lwjgl.version}"/>
//				<filter token="JINPUTVERSION" value="${jinput.version}"/>
//    		</filterset>
}

for (final def os in ["windows", "linux", "osx"]) {
    tasks.register("createmavennativejars_${os}", Jar) {
        it.description = "lwjgl-platform-natives-${os}.jar"

        it.dependsOn "compile"

        it.from("${proparties['lwjgl.lib']}/${os}") {tr->
            def praps = proparties["lwjgl-${os.replace("osx", "macosx")}-lwjgl.fileset"]
            praps.includes.forEach {tr.include it}
            praps.excludes.forEach {tr.exclude it}
        }

        it.from("${proparties['lwjgl.bin'].toString()}/lwjgl") {tr->
            def praps = proparties["lwjgl-${os.replace("osx", "macosx")}-lwjgl.fileset"]
            praps.includes.forEach {tr.include it}
            praps.excludes.forEach {tr.exclude it}
        }

        it.destinationDirectory = proparties['lwjgl.dstMaven']
        it.archiveFileName = "lwjgl-platform-natives-${os}.jar"
    }
}

tasks.register("createmavennativejars") {
    mustRunAfter "createmavenjavadocs"
    dependsOn "compile"
    for (final def os in ["windows", "linux", "osx"]) {
        dependsOn("createmavennativejars_${os}")
        outputs.file(tasks.named("createmavennativejars_${os}").get().outputs)
    }
}

tasks.register("createmavensourcejars_lwjgl", Jar) {
    description = "lwjgl-sources.jar"

    from proparties['lwjgl-sources.manual.fileset']
    from proparties['lwjgl-sources.generated.fileset']

    destinationDirectory = proparties['lwjgl.dstMaven']
    archiveFileName = "lwjgl-sources.jar"
}

tasks.register("createmavensourcejars_lwjgl_util_applet", Jar) {
    description = "lwjgl_util_applet-sources.jar"

    from proparties['lwjgl_util_applet-sources.fileset']

    destinationDirectory = proparties['lwjgl.dstMaven']
    archiveFileName = "lwjgl_util_applet-sources.jar"
}

tasks.register("createmavensourcejars_lwjgl_util", Jar) {
    description = "lwjgl_util-sources.jar"

    from proparties['lwjgl_util-sources.fileset']

    destinationDirectory = proparties['lwjgl.dstMaven']
    archiveFileName = "lwjgl_util-sources.jar"
}

tasks.register("createmavensourcejars") {
    description = "Packages the java files"
    dependsOn "createmavensourcejars_lwjgl", "createmavensourcejars_lwjgl_util_applet", "createmavensourcejars_lwjgl_util"

    outputs.files(
            createmavensourcejars_lwjgl.outputs,
            createmavensourcejars_lwjgl_util_applet.outputs,
            createmavensourcejars_lwjgl_util.outputs
    )
}

tasks.register("createmavenjavadocs_lwjgl_doc", Javadoc) {
    dependsOn "copylwjgljars"
    destinationDir(file("${proparties['lwjgl.dstMaven'].toString()}/lwjgl-javadoc"))

    failOnError = false
    maxMemory = '2G'

    options {
        source = 8
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        memberLevel = JavadocMemberLevel.PACKAGE
        windowTitle("LWJGL API")
        header("<h1>Lightweight Java Game Toolkit</h1>")
    }

    it.source(proparties['lwjgl-sources.manual.fileset'], proparties['lwjgl-sources.generated.fileset'])

    classpath = files("${proparties['lwjgl.lib']}/jinput.jar")
// 		<javadoc destdir="${lwjgl.dstMaven}/lwjgl-javadoc" classpath="${lwjgl.lib}/jinput.jar" author="true" version="true" use="true" source="1.8" windowtitle="LWJGL API" useexternalfile="true">
//			<fileset refid="lwjgl-sources.manual.fileset"/>
//			<fileset refid="lwjgl-sources.generated.fileset"/>
//			<doctitle><![CDATA[<h1>Lightweight Java Game Toolkit</h1>]]></doctitle>
//			<bottom><![CDATA[<i>Copyright &#169; 2002-2010 lwjgl.org. All Rights Reserved.</i>]]></bottom>
//		</javadoc>
}

tasks.register("createmavenjavadocs_lwjgl", Jar) {
    description = "lwjgl-javadoc.jar"

    dependsOn("copylwjgljars", "createmavenjavadocs_lwjgl_doc")

    from file("${proparties['lwjgl.dstMaven'].toString()}/lwjgl-javadoc")

    destinationDirectory = proparties['lwjgl.dstMaven']
    archiveFileName = "lwjgl-javadoc.jar"
}

tasks.register("createmavenjavadocs_lwjgl_util_doc", Javadoc) {
    dependsOn "copylwjgljars"
    destinationDir(file("${proparties['lwjgl.dstMaven'].toString()}/lwjgl_util-javadoc"))

    failOnError = false
    maxMemory = '2G'

    options {
        source = 8
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        memberLevel = JavadocMemberLevel.PACKAGE
        windowTitle("LWJGL UTIL API")
        header("<h1>Lightweight Java Game Toolkit</h1>")
    }

    it.source(proparties['lwjgl_util-sources.fileset'])

    classpath = files("${proparties['lwjgl.lib']}/jinput.jar", "${proparties['lwjgl.lib']}/lwjgl.jar")
// 		<javadoc destdir="${lwjgl.dstMaven}/lwjgl_util-javadoc" classpath="${lwjgl.lib}/jinput.jar:${lwjgl.lib}/lwjgl.jar" author="true" version="true" use="true" source="1.8" windowtitle="LWJGL UTIL API" useexternalfile="true">
//			<fileset refid="lwjgl_util-sources.fileset"/>
//			<doctitle><![CDATA[<h1>Lightweight Java Game Toolkit</h1>]]></doctitle>
//			<bottom><![CDATA[<i>Copyright &#169; 2002-2010 lwjgl.org. All Rights Reserved.</i>]]></bottom>
//		</javadoc>
}

tasks.register("createmavenjavadocs_lwjgl_util", Jar) {
    description = "lwjgl_util-javadoc.jar"

    dependsOn("copylwjgljars", "createmavenjavadocs_lwjgl_util_doc")

    from file("${proparties['lwjgl.dstMaven'].toString()}/lwjgl_util-javadoc")

    destinationDirectory = proparties['lwjgl.dstMaven']
    archiveFileName = "lwjgl_util-javadoc.jar"
}

tasks.register("createmavenjavadocs_lwjgl_util_applet_doc", Javadoc) {
    dependsOn "copylwjgljars"
    destinationDir(file("${proparties['lwjgl.dstMaven'].toString()}/lwjgl_util_applet-javadoc"))

    failOnError = false
    maxMemory = '2G'

    options {
        source = 8
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        memberLevel = JavadocMemberLevel.PACKAGE
        windowTitle("LWJGL UTIL API")
        header("<h1>Lightweight Java Game Toolkit</h1>")
    }

    it.source(proparties['lwjgl_util_applet-sources.fileset'])

    classpath = files("${proparties['lwjgl.lib']}/jinput.jar", "${proparties['lwjgl.lib']}/lwjgl.jar")
// 		<javadoc destdir="${lwjgl.dstMaven}/lwjgl_util_applet-javadoc" classpath="${lwjgl.lib}/jinput.jar:${lwjgl.lib}/lwjgl.jar" author="true" version="true" use="true" source="1.8" windowtitle="LWJGL UTIL API" useexternalfile="true">
//			<fileset refid="lwjgl_util_applet-sources.fileset"/>
//			<doctitle><![CDATA[<h1>Lightweight Java Game Toolkit</h1>]]></doctitle>
//			<bottom><![CDATA[<i>Copyright &#169; 2002-2010 lwjgl.org. All Rights Reserved.</i>]]></bottom>
//		</javadoc>
}

tasks.register("createmavenjavadocs_lwjgl_util_applet", Jar) {
    description = "lwjgl_util_applet-javadoc.jar"

    dependsOn("copylwjgljars", "createmavenjavadocs_lwjgl_util_applet_doc")

    from file("${proparties['lwjgl.dstMaven'].toString()}/lwjgl_util_applet-javadoc")

    destinationDirectory = proparties['lwjgl.dstMaven']
    archiveFileName = "lwjgl_util_applet-javadoc.jar"
}

tasks.register("createmavenjavadocs") {
    description = "Creates the Javadoc"

    dependsOn("copylwjgljars", "createmavenjavadocs_lwjgl", "createmavenjavadocs_lwjgl_util", "createmavenjavadocs_lwjgl_util_applet")

    outputs.files(
            createmavenjavadocs_lwjgl.outputs,
            createmavenjavadocs_lwjgl_util.outputs,
            createmavenjavadocs_lwjgl_util_applet.outputs
    )

    doLast {
        delete(
                "${proparties['lwjgl.dstMaven'].toString()}/lwjgl-javadoc",
                "${proparties['lwjgl.dstMaven'].toString()}/lwjgl_util-javadoc",
                "${proparties['lwjgl.dstMaven'].toString()}/lwjgl_util_applet-javadoc"
        )
    }
}

tasks.register("copymaventdist", Zip) {
    dependsOn "copylwjgljars", "createmavensourcejars", "createmavenjavadocs", "copymavenpoms"

    from(proparties["lwjgl.temp"]) {
        include "maven/**"
    }

    destinationDirectory = file("./dist")
    archiveFileName = "lwjgl-maven-${proparties['lwjgl.version']}.zip"
}

tasks.register("maven_clean") {
    delete proparties['lwjgl.dstMaven']
    mkdir proparties['lwjgl.dstMaven']
}

tasks.register("maven") {
    description = "Added as dependency because using antcall creates a new project scope"

    dependsOn "compile"
    dependsOn "-createjars"
    dependsOn "maven_clean"
    dependsOn("copylwjgljars", "createmavensourcejars", "createmavenjavadocs",
            "createmavennativejars", "copymavenpoms", "copymaventdist")
}

tasks.register("maven-full") {
    dependsOn("a--initialize", "a-generate-all", "compile", "-createjars", "maven")
}