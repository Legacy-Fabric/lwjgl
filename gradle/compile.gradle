def proparties = project.praps

import org.apache.tools.ant.taskdefs.condition.Os

//tasks.register("createjars_lwjgl_test", Jar) {
//    dependsOn "compile"
//    from proparties["lwjgl_test.fileset"]
//    from proparties["lwjgl_test_extra.fileset"]
//
//    destinationDirectory = file(proparties["lwjgl.temp"].toString() + "/jar")
//    archiveFileName = "lwjgl_test.jar"
//}
//
//tasks.register("-createjars") {
//    dependsOn "createjars_lwjgl_test"
//}
//
//tasks.register("-createdebugjars", Jar) {
//    dependsOn "compile"
//    from proparties["lwjgl.fileset"]
//    from proparties["lwjgl.fileset.dependencies"]
//
//    manifest {
//        attributes(
//                "Sealed": true
//        )
//    }
//
//    destinationDirectory = file(proparties["lwjgl.temp"].toString() + "/jar")
//    archiveFileName = "lwjgl-debug.jar"
//}

def ENV = System.getenv()

tasks.register("compile_native") {
    description = "Compiles the native files"
    dependsOn "-initialize", ":lwjgl:compileJava", "touch-version", "a-version-mismatch"

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        dependsOn "link_win32"
    }

    if (Os.isName("linux")) {
        dependsOn("linux_natives_strip")
    }

    if (Os.isName("freebsd")) {
        dependsOn("a--compile_native_freebsd")
    }

    if (Os.isName("openbsd")) {
        dependsOn("a--compile_native_openbsd")
    }

    if (Os.isName("sunos")) {
        dependsOn("a--compile_native_solaris")
    }

    if (Os.isName("mac os x")) {
        dependsOn("macosx_natives_lipo")
    }
}

tasks.register("compile_native_es") {
    description = "Compiles the native files"
    dependsOn "-initialize", "compile", "touch-version", "a-version-mismatch"

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        dependsOn "a--compile_native_win32_es"
    }

    if (Os.isName("linux")) {
        dependsOn "a--compile_native_linux_es"
    }
}

for(final def os in ["freebsd", "openbsd", "solaris"]) {
    tasks.named("a--compile_native_${os}").get().dependsOn "-initialize", "compile", "touch-version", "a-version-mismatch"
}

for(final def os in ["win32", "linux"]) {
    tasks.named("a--compile_native_${os}_es").get().dependsOn "-initialize", "compile", "touch-version", "a-version-mismatch"
}