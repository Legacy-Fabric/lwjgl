def proparties = project.praps

tasks.register("generate-all") {
    description = "Generates java and native source"
    dependsOn (
            ":lwjgl-templates:generateOpenal",
            ":lwjgl-templates:generateOpengl",
            "generate-opengl-capabilities",
            "generate-opengl-references",
            ":lwjgl-templates:generateOpengles",
            "generate-opengles-capabilities",
            ":lwjgl-templates:generateOpencl",
            "generate-opencl-capabilities"
    )
}

tasks.register("generate-debug") {
    description = "Generates java and native source with debug functionality"
    dependsOn (
            ":lwjgl-templates:generateOpenalDebug",
            ":lwjgl-templates:generateOpenglDebug",
            "generate-opengl-capabilities-debug",
            "generate-opengl-references",
            ":lwjgl-templates:generateOpenglesDebug",
            "generate-opengles-capabilities-debug",
            ":lwjgl-templates:generateOpenclDebug",
            "generate-opencl-capabilities-debug"
    )
}

//tasks.register("generate-opengl-capabilities", JavaCompile) {
//    dependsOn "generators", "generate-opengl"
//    description = "Generates java and native source for GL"
//
//    classpath = files(
//            proparties["lwjgl.src.templates"],
//            file("src/java/"),
//            proparties["lwjgl.bin"]
//    )
//
//    destinationDirectory.set(proparties["lwjgl.bin"])
//
//    source(fileTree(proparties["lwjgl.src.templates.gl"]) {
//        include proparties["opengl-template-pattern"].split(",")
//    })
//
//    options.annotationProcessorPath = files(proparties["lwjgl.bin"])
//    options.sourcepath = files(proparties["lwjgl.src.templates.gl"])
//    options.generatedSourceOutputDirectory = file("${proparties["lwjgl.src"]}/generated")
//    options.compilerArgs += [
//            "-proc:only",
//            "-g:none",
//            "-processor",
//            "org.lwjgl.util.generator.opengl.GLGeneratorProcessor",
//            "-Acontextspecific"
//    ]
//}

tasks.named("generate-opengl-capabilities").get().dependsOn("generators")
tasks.named("generate-opengl-capabilities").get().dependsOn("generate-opengl")

tasks.register("generate-opengl-capabilities-debug", JavaCompile) {
    dependsOn "generators", "generate-opengl-debug"
    description = "Generates debug java and native source for GL"

    classpath = files(
            "${proparties["lwjgl.src"]}/java/",
            proparties["lwjgl.src.templates"],
            proparties["lwjgl.bin"]
    )

    destinationDirectory.set(proparties["lwjgl.bin"])

    source(fileTree(proparties["lwjgl.src.templates.gl"]) {
        include proparties["opengl-template-pattern"].split(",")
    })

    options.annotationProcessorPath = files(proparties["lwjgl.bin"])
    options.sourcepath = files(proparties["lwjgl.src.templates.gl"])
    options.generatedSourceOutputDirectory = file("${proparties["lwjgl.src"]}/generated")
    options.compilerArgs += [
            "-proc:only",
            "-g:none",
            "-processor",
            "org.lwjgl.util.generator.opengl.GLGeneratorProcessor",
            "-Acontextspecific",
            "-Ageneratechecks"
    ]
}

//tasks.register("generate-opengl-references", JavaCompile) {
//    dependsOn "generators", "generate-opengl-capabilities"
//    description = "Generates java and native source for GL"
//
//    classpath = files(
//            "${proparties["lwjgl.src"]}/java",
//            proparties["lwjgl.src.templates"],
//            proparties["lwjgl.bin"]
//    )
//
//    destinationDirectory.set(proparties["lwjgl.bin"])
//
//    source(fileTree(proparties["lwjgl.src.templates.gl"]) {
//        include proparties["opengl-template-pattern"].split(",")
//    })
//
//    options.annotationProcessorPath = files(proparties["lwjgl.bin"])
//    options.sourcepath = files(proparties["lwjgl.src.templates.gl"])
//    options.generatedSourceOutputDirectory = file("${proparties["lwjgl.src"]}/generated")
//    options.compilerArgs += [
//            "-proc:only",
//            "-g:none",
//            "-processor",
//            "org.lwjgl.util.generator.opengl.GLReferencesGeneratorProcessor"
//    ]
//}

tasks.named("generate-opengl-references").get().dependsOn("generators")
tasks.named("generate-opengl-references").get().dependsOn("generate-opengl-capabilities")

tasks.register("generate-opengles-capabilities", JavaCompile) {
    dependsOn "generators", "generate-opengles"
    description = "Generates java and native source for GL ES"

    classpath = files(
            "${proparties["lwjgl.src"]}/java",
            proparties["lwjgl.src.templates"],
            proparties["lwjgl.bin"]
    )

    destinationDirectory.set(proparties["lwjgl.bin"])

    source(fileTree(proparties["lwjgl.src.templates.gles"]) {
        include proparties["opengles-template-pattern"].split(",")
    })

    options.annotationProcessorPath = files(proparties["lwjgl.bin"])
    options.sourcepath = files(proparties["lwjgl.src.templates.gles"])
    options.generatedSourceOutputDirectory = file("${proparties["lwjgl.src"]}/generated")
    options.compilerArgs += [
            "-proc:only",
            "-g:none",
            "-processor",
            "org.lwjgl.util.generator.opengl.GLESGeneratorProcessor"
    ]
}

tasks.register("generate-opengles-capabilities-debug", JavaCompile) {
    dependsOn "generators", "generate-opengles-debug"
    description = "Generates debug java and native source for GL ES"

    classpath = files(
            "${proparties["lwjgl.src"]}/java",
            proparties["lwjgl.src.templates"],
            proparties["lwjgl.bin"]
    )

    destinationDirectory.set(proparties["lwjgl.bin"])

    source(fileTree(proparties["lwjgl.src.templates.gles"]) {
        include proparties["opengles-template-pattern"].split(",")
    })

    options.annotationProcessorPath = files(proparties["lwjgl.bin"])
    options.sourcepath = files(proparties["lwjgl.src.templates.gles"])
    options.generatedSourceOutputDirectory = file("${proparties["lwjgl.src"]}/generated")
    options.compilerArgs += [
            "-proc:only",
            "-g:none",
            "-processor",
            "org.lwjgl.util.generator.opengl.GLESGeneratorProcessor",
            "-Ageneratechecks"
    ]
}

tasks.register("generate-opencl-capabilities", JavaCompile) {
    dependsOn "generators", "generate-opencl"
    description = "Generates capabilities for CL"

    classpath = files(
            "${proparties["lwjgl.src"]}/java",
            proparties["lwjgl.src.templates"],
            proparties["lwjgl.bin"]
    )

    destinationDirectory.set(proparties["lwjgl.bin"])

    source(fileTree(proparties["lwjgl.src.templates.cl"]) {
        include proparties["opencl-template-pattern"].split(",")
    })

    options.annotationProcessorPath = files(proparties["lwjgl.bin"])
    options.sourcepath = files(proparties["lwjgl.src.templates.cl"])
    options.generatedSourceOutputDirectory = file("${proparties["lwjgl.src"]}/generated")
    options.compilerArgs += [
            "-proc:only",
            "-g:none",
            "-processor",
            "org.lwjgl.util.generator.opencl.CLGeneratorProcessor",
            "-Acontextspecific"
    ]
}

tasks.register("generate-opencl-capabilities-debug", JavaCompile) {
    dependsOn "generators", "generate-opencl-debug"
    description = "Generates debug capabilities for CL"

    classpath = files(
            "${proparties["lwjgl.src"]}/java",
            proparties["lwjgl.src.templates"],
            proparties["lwjgl.bin"]
    )

    destinationDirectory.set(proparties["lwjgl.bin"])

    source(fileTree(proparties["lwjgl.src.templates.cl"]) {
        include proparties["opencl-template-pattern"].split(",")
    })

    options.annotationProcessorPath = files(proparties["lwjgl.bin"])
    options.sourcepath = files(proparties["lwjgl.src.templates.cl"])
    options.generatedSourceOutputDirectory = file("${proparties["lwjgl.src"]}/generated")
    options.compilerArgs += [
            "-proc:only",
            "-g:none",
            "-processor",
            "org.lwjgl.util.generator.opencl.CLGeneratorProcessor",
            "-Acontextspecific",
            "-Ageneratechecks"
    ]
}
