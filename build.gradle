plugins {
    id 'java-library'
}

def ported = [
        "clean-generated",
        "clean-generated-native",
        "clean-java",
        "clean-native",
        "clean",
        "-copylwjgljars",
        "-copymaventdist",
        "-copymavenpoms",
        "-createmavennativejars",
        "-createmavensourcejars",
        "-createmavenjavadocs",
        "maven",
        "maven-full",
        "-createjars",
        "-createdebugjars",
        "compile_native",
        "compile",
        "-initialize",
        "generate-all",
        "generate-openal",
        "generate-openal-debug",
        "generate-debug",
        "generate-opengl",
        "generate-opengl-debug",
        "generate-opengl-capabilities",
        "generate-opengl-capabilities-debug",
        "generate-opengl-references",
        "generate-opengles",
        "generate-opengles-debug",
        "generate-opengles-capabilities",
        "generate-opengles-capabilities-debug",
        "generate-opencl",
        "generate-opencl-debug",
        "generate-opencl-capabilities",
        "generate-opencl-capabilities-debug",
        "generators"
]

ant.importBuild('build.xml') { String oldTargetName ->
    if (ported.contains(oldTargetName)) return oldTargetName
    return "a-" + oldTargetName
}

apply from:"gradle/props.gradle"

def proparties = project.praps

tasks.register("-initialize") {
    description = "Initialize build"
    mkdir(proparties["lwjgl.bin"])
    mkdir(proparties["lwjgl.bin"].toString() + "/lwjgl")
    mkdir(proparties["lwjgl.bin"].toString() + "/lwjgles")
    mkdir(proparties["lwjgl.lib"])
    mkdir(proparties["lwjgl.dist"])
    mkdir(proparties["lwjgl.docs"].toString() + "/javadoc")
    mkdir(proparties["lwjgl.res"])
    mkdir(proparties["lwjgl.temp"])
    mkdir(proparties["lwjgl.temp"].toString() + "/jar")
    mkdir(proparties["lwjgl.temp"].toString() + "/doc")
    mkdir(proparties["lwjgl.temp"].toString() + "/res")
    mkdir(proparties["lwjgl.temp"].toString() + "/native")
    mkdir(proparties["lwjgl.temp"].toString() + "/native/windows")
    mkdir(proparties["lwjgl.temp"].toString() + "/native/linux")
    mkdir(proparties["lwjgl.temp"].toString() + "/native/freebsd")
    mkdir(proparties["lwjgl.temp"].toString() + "/native/openbsd")
    mkdir(proparties["lwjgl.temp"].toString() + "/native/macosx")
    mkdir(proparties["lwjgl.temp"].toString() + "/native/solaris")
}

apply from:"gradle/generator.gradle"
apply from:"gradle/compile.gradle"
apply from:"gradle/clean.gradle"
apply from:"gradle/maven.gradle"

tasks.withType(JavaCompile).configureEach {
    targetCompatibility = JavaVersion.VERSION_1_8
    sourceCompatibility = JavaVersion.VERSION_1_8
    it.options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) it.options.release = 8
}